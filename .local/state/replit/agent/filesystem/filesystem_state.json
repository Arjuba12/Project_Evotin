{"file_contents":{"backend/__init__.py":{"content":"\n","size_bytes":1},"frontend/README.md":{"content":"# React + Vite\n\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\n\nCurrently, two official plugins are available:\n\n- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh\n- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh\n\n## Expanding the ESLint configuration\n\nIf you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.\n","size_bytes":856},"frontend/eslint.config.js":{"content":"import js from '@eslint/js'\nimport globals from 'globals'\nimport reactHooks from 'eslint-plugin-react-hooks'\nimport reactRefresh from 'eslint-plugin-react-refresh'\nimport { defineConfig, globalIgnores } from 'eslint/config'\n\nexport default defineConfig([\n  globalIgnores(['dist']),\n  {\n    files: ['**/*.{js,jsx}'],\n    extends: [\n      js.configs.recommended,\n      reactHooks.configs['recommended-latest'],\n      reactRefresh.configs.vite,\n    ],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n      parserOptions: {\n        ecmaVersion: 'latest',\n        ecmaFeatures: { jsx: true },\n        sourceType: 'module',\n      },\n    },\n    rules: {\n      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],\n    },\n  },\n])\n","size_bytes":763},"frontend/vite.config.js":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    allowedHosts: [\n      'localhost',\n      '127.0.0.1',\n      'c66c3433-407a-492e-a2ad-20c4b85d51b2-00-1h32aauoe6m8i.sisko.replit.dev'\n    ]\n  }\n})\n","size_bytes":320},"smart-contract/README.md":{"content":"# Sample Hardhat Project\n\nThis project demonstrates a basic Hardhat use case. It comes with a sample contract, a test for that contract, and a Hardhat Ignition module that deploys that contract.\n\nTry running some of the following tasks:\n\n```shell\nnpx hardhat help\nnpx hardhat test\nREPORT_GAS=true npx hardhat test\nnpx hardhat node\nnpx hardhat ignition deploy ./ignition/modules/Lock.js\n```\n","size_bytes":390},"smart-contract/hardhat.config.js":{"content":"require(\"@nomicfoundation/hardhat-ethers\");\n\nmodule.exports = {\n  solidity: \"0.8.28\",\n  networks: {\n    localhost: {\n      url: \"http://127.0.0.1:8545\",\n    },\n  },\n};\n","size_bytes":168},"backend/app/__init__.py":{"content":"","size_bytes":0},"backend/app/database.py":{"content":"from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker, declarative_base\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()  # Biar bisa baca .env (Railway otomatis inject ENV vars)\n\n# Railway otomatis kasih DATABASE_URL\n# Contoh: postgresql://username:password@host:port/dbname\nDATABASE_URL = os.getenv(\"DATABASE_URL\")\n\n# Kalau masih kosong (misalnya running lokal), fallback ke SQLite\nif not DATABASE_URL:\n    BASE_DIR = os.path.dirname(os.path.abspath(__file__))\n    DATABASE_URL = f\"sqlite:///{os.path.join(BASE_DIR, 'evoting.db')}\"\n\n# Engine PostgreSQL → connect_args khusus SQLite nggak perlu\nengine = create_engine(DATABASE_URL)\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\nprint(f\"Using database: {DATABASE_URL}\")\n","size_bytes":908},"backend/app/main.py":{"content":"from fastapi import FastAPI, HTTPException, Depends, status\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import func\nfrom datetime import timedelta\nfrom typing import List\nimport random\n\nfrom pydantic import BaseModel\n\nfrom .database import get_db, Base, engine\nfrom .models import User, Candidate, Vote\nfrom . import models, schemas, database\nfrom datetime import datetime, timezone\nfrom pytz import timezone as tz\n\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv() \n\nMAIL_USERNAME = os.getenv(\"MAIL_USERNAME\")\nMAIL_PASSWORD = os.getenv(\"MAIL_PASSWORD\")\nprint(MAIL_USERNAME, MAIL_PASSWORD)\n\n\nfrom jose import jwt, JWTError\nfrom .utils.jwt_handler import SECRET_KEY, ALGORITHM\n\nfrom .utils.hashing import hash_password, verify_password\nfrom .utils.jwt_handler import (\n    create_access_token,\n    decode_access_token,\n    ACCESS_TOKEN_EXPIRE_MINUTES,\n)\n\nWIB = tz(\"Asia/Jakarta\")\n\ndef to_utc(dt: datetime):\n    \"\"\"Konversi datetime naive/WIB ke UTC\"\"\"\n    if dt.tzinfo is None:\n        dt = WIB.localize(dt)  # kalau naive → anggap WIB\n    return dt.astimezone(timezone.utc)\n    \nsecurity = HTTPBearer()\n\ndef get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):\n    token = credentials.credentials\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Invalid authentication credentials\",\n            )\n        return username\n    except JWTError:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid token\",\n        )\n\napp = FastAPI()\n\nclass VotingPeriodBase(BaseModel):\n    start_date: datetime\n    end_date: datetime\n\nclass VotingPeriodCreate(VotingPeriodBase):\n    pass\n\nclass VotingPeriodResponse(VotingPeriodBase):\n    id: int\n\n    class Config:\n        orm_mode = True\n        json_encoders = {\n            datetime: lambda v: v.isoformat()\n        }\n        \nclass CandidateCreate(BaseModel):\n    name: str\n    image: str | None = None\n    visi_misi: str | None = None\n\nclass CandidateResponse(BaseModel):\n    id: int\n    name: str\n    image: str | None\n    visi_misi: str | None\n\nclass Config:\n        orm_mode = True\n        \nclass VoteRequest(BaseModel):\n    candidate_id: int\n\n\nimport re\ndef validate_password(password: str):\n    if len(password) < 8:\n        raise HTTPException(status_code=400, detail=\"Password minimal 8 karakter\")\n    if not re.search(r\"[A-Z]\", password):\n        raise HTTPException(status_code=400, detail=\"Password harus mengandung huruf besar\")\n    if not re.search(r\"[0-9]\", password):\n        raise HTTPException(status_code=400, detail=\"Password harus mengandung angka\")\n    if not re.search(r\"[@$!%*?&]\", password):\n        raise HTTPException(status_code=400, detail=\"Password harus mengandung simbol (@$!%*?&)\")\n    return True\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\n        \"http://localhost:5173\", \"https://project-evotin.vercel.app\" \n        ],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# ⬇️ bikin tabel saat start\nBase.metadata.create_all(bind=engine)\n\n\nclass RegisterRequest(BaseModel):\n    name: str\n    email: str\n    password: str\n\n\nclass LoginRequest(BaseModel):\n    email: str\n    password: str\n\nclass ResendOTPRequest(BaseModel):\n    email: str\n    \n# Fungsi kirim email\n# Fungsi kirim email\ndef send_email_otp(to_email: str, otp: str):\n    # Ambil dari .env\n    smtp_server = \"smtp.gmail.com\"\n    smtp_port = 587\n    sender_email = MAIL_USERNAME        # dari .env\n    sender_password = MAIL_PASSWORD     # dari .env\n\n    msg = MIMEMultipart()\n    msg[\"From\"] = sender_email\n    msg[\"To\"] = to_email\n    msg[\"Subject\"] = \"NEOVOTE OTP Verification\"\n\n    body = f\"Kode OTP Anda: {otp}\\n\\nJangan bagikan kode ini ke siapa pun.\"\n    msg.attach(MIMEText(body, \"plain\"))\n\n    try:\n        server = smtplib.SMTP(smtp_server, smtp_port)\n        server.starttls()\n        server.login(sender_email, sender_password)\n        server.send_message(msg)\n        server.quit()\n        print(f\"✅ OTP dikirim ke {to_email}\")\n    except Exception as e:\n        print(f\"⚠️ Gagal kirim email: {e}\")\n\n\n@app.post(\"/register\")\ndef register(req: RegisterRequest, db: Session = Depends(get_db)):\n    email = req.email.strip().lower()\n    validate_password(req.password)\n\n    # 📌 PERBAIKAN KRUSIAL: Memotong password agar tidak lebih dari 72 bytes\n    # Ini mengatasi error ValueError yang disebabkan oleh passlib/bcrypt.\n    password_to_use = req.password[:72] # Potong string di sini\n\n    user_exist = db.query(User).filter(User.email == email).first()\n    if user_exist:\n        if user_exist.is_verified:\n            raise HTTPException(status_code=400, detail=\"Email sudah terdaftar & terverifikasi\")\n        else:\n            db.delete(user_exist)\n            db.commit()\n            notif = \"⚠️ Akun lama belum diverifikasi, data lama dihapus & OTP baru dikirim.\"\n    else:\n        notif = \"✅ Akun baru berhasil dibuat & OTP dikirim.\"\n\n    username_exist = db.query(User).filter(User.username == req.name).first()\n    if username_exist:\n        raise HTTPException(status_code=400, detail=\"Username sudah digunakan\")\n\n    otp = str(random.randint(100000, 999999))\n    \n    # Gunakan password yang sudah dipotong\n    hashed_pw = hash_password(password_to_use) \n\n    new_user = User(\n        username=req.name,\n        email=email,\n        password=hashed_pw,\n        otp_code=otp,\n        is_verified=False\n    )\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n\n    # 🔹 Kirim OTP ke email\n    send_email_otp(email, otp)\n\n    return {\"message\": notif}\n\n\n@app.post(\"/login\")\ndef login(req: LoginRequest, db: Session = Depends(get_db)):\n    # Cari user berdasarkan email\n    user = db.query(User).filter(User.email == req.email.strip().lower()).first()\n\n    # Cek user & password\n    if not user or not verify_password(req.password, user.password):\n        raise HTTPException(status_code=401, detail=\"❌ Email atau password salah\")\n\n    # Cek status verifikasi\n    if not user.is_verified:\n        raise HTTPException(\n            status_code=403,\n            detail=\"⚠️ Akun belum diverifikasi. Silakan cek email untuk OTP.\"\n        )\n\n    # Kalau lolos semua → buat token\n    access_token = create_access_token(\n        data={\"sub\": user.email},\n        expires_delta=timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES),\n    )\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\ndef read_users_me(current_user: str = Depends(get_current_user), db: Session = Depends(get_db)):\n    user = db.query(User).filter(User.email == current_user).first()\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User tidak ditemukan\")\n\n    return {\"id\": user.id, \"name\": user.username, \"email\": user.email}\n\n\n@app.post(\"/verify-otp\")\ndef verify_otp(req: schemas.VerifyOTP, db: Session = Depends(database.get_db)):\n    user = db.query(models.User).filter(models.User.email == req.email).first()\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User tidak ditemukan\")\n    if user.is_verified:\n        raise HTTPException(status_code=400, detail=\"User sudah terverifikasi\")\n    if user.otp_code != req.otp:\n        raise HTTPException(status_code=400, detail=\"OTP salah\")\n\n    # OTP valid → aktifkan user\n    user.is_verified = True\n    user.otp_code = None  # hapus OTP\n    db.commit()\n\n    return {\"message\": \"OTP valid, akun sudah aktif\"}\n\n@app.post(\"/resend-otp\")\ndef resend_otp(req: ResendOTPRequest, db: Session = Depends(database.get_db)):\n    user = db.query(User).filter(models.User.email == req.email).first()\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User tidak ditemukan\")\n    if user.is_verified:\n        raise HTTPException(status_code=400, detail=\"User sudah terverifikasi\")\n\n    new_otp = str(random.randint(100000, 999999))\n    user.otp_code = new_otp\n    db.commit()\n\n    # 🔹 Kirim OTP baru ke email\n    send_email_otp(user.email, new_otp)\n\n    return {\"message\": \"OTP baru telah dikirim ke email\"}\n\n# GET semua kandidat\n# ✅ CREATE kandidat\n@app.post(\"/candidates\", response_model=CandidateResponse)\ndef add_candidate(req: CandidateCreate, db: Session = Depends(database.get_db)):\n    candidate = models.Candidate(name=req.name, image=req.image, visi_misi=req.visi_misi)\n    db.add(candidate)\n    db.commit()\n    db.refresh(candidate)\n    return candidate\n\n\n# ✅ READ semua kandidat\n@app.get(\"/candidates\", response_model=List[CandidateResponse])\ndef get_candidates(db: Session = Depends(get_db)):\n    candidates = db.query(models.Candidate).all()\n    return candidates\n\n\n# ✅ READ kandidat by id\n@app.get(\"/candidates/{candidate_id}\", response_model=CandidateResponse)\ndef get_candidate(candidate_id: int, db: Session = Depends(get_db)):\n    candidate = db.query(models.Candidate).filter(models.Candidate.id == candidate_id).first()\n    if not candidate:\n        raise HTTPException(status_code=404, detail=\"Candidate tidak ditemukan\")\n    return candidate\n\n\n# ✅ UPDATE kandidat\n@app.put(\"/candidates/{candidate_id}\", response_model=CandidateResponse)\ndef update_candidate(candidate_id: int, req: CandidateCreate, db: Session = Depends(get_db)):\n    candidate = db.query(models.Candidate).filter(models.Candidate.id == candidate_id).first()\n    if not candidate:\n        raise HTTPException(status_code=404, detail=\"Candidate tidak ditemukan\")\n\n    candidate.name = req.name\n    candidate.image = req.image\n    candidate.visi_misi = req.visi_misi\n\n    db.commit()\n    db.refresh(candidate)\n    return candidate\n\n\n# ✅ DELETE kandidat\n@app.delete(\"/candidates/{candidate_id}\")\ndef delete_candidate(candidate_id: int, db: Session = Depends(get_db)):\n    candidate = db.query(models.Candidate).filter(models.Candidate.id == candidate_id).first()\n    if not candidate:\n        raise HTTPException(status_code=404, detail=\"Candidate tidak ditemukan\")\n\n    db.delete(candidate)\n    db.commit()\n    return {\"message\": \"Candidate berhasil dihapus\"}\n\n@app.post(\"/vote\", status_code=status.HTTP_201_CREATED)\ndef cast_vote(\n    req: VoteRequest,\n    current_user: str = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    user = db.query(User).filter(User.email == current_user).first()\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User tidak ditemukan\")\n\n    candidate = db.query(Candidate).filter(Candidate.id == req.candidate_id).first()\n    if not candidate:\n        raise HTTPException(status_code=404, detail=\"Candidate tidak ditemukan\")\n\n    # Ambil periode voting terbaru\n    period = db.query(models.VotingPeriod).order_by(models.VotingPeriod.id.desc()).first()\n    if not period:\n        raise HTTPException(status_code=400, detail=\"Periode voting belum ditentukan\")\n\n    # Pastikan semua datetime pakai UTC untuk perbandingan\n    now = datetime.now(timezone.utc)\n\n    start = period.start_date\n    end = period.end_date\n\n    if start.tzinfo is None:\n        start = start.replace(tzinfo=timezone.utc)\n    else:\n        start = start.astimezone(timezone.utc)\n\n    if end.tzinfo is None:\n        end = end.replace(tzinfo=timezone.utc)\n    else:\n        end = end.astimezone(timezone.utc)\n        \n    # Cek status voting\n    if now < start:\n        raise HTTPException(\n            status_code=403,\n            detail=\"Voting belum dimulai. Silakan tunggu hingga periode dibuka.\"\n        )\n    if now > end:\n        raise HTTPException(\n            status_code=403,\n            detail=\"Voting sudah selesai. Periode pemilihan telah berakhir.\"\n        )\n\n    # Cek user sudah vote atau belum\n    existing_vote = db.query(Vote).filter(Vote.user_id == user.id).first()\n    if existing_vote:\n        raise HTTPException(status_code=400, detail=\"User sudah voting\")\n\n    # Simpan vote\n    new_vote = Vote(user_id=user.id, candidate_id=req.candidate_id)\n    db.add(new_vote)\n    db.commit()\n    db.refresh(new_vote)\n\n    return {\"message\": \"Vote berhasil\", \"candidate\": candidate.name}\n\n@app.get(\"/results\")\ndef get_results(db: Session = Depends(get_db)):\n    results = (\n        db.query(\n            Candidate.id,\n            Candidate.name,\n            func.count(Vote.id).label(\"total_votes\")\n        )\n        .outerjoin(Vote, Candidate.id == Vote.candidate_id)\n        .group_by(Candidate.id)\n        .all()\n    )\n    return [\n        {\"id\": r.id, \"name\": r.name, \"total_votes\": r.total_votes}\n        for r in results\n    ]\n    \n@app.get(\"/stats\")\ndef get_stats(db: Session = Depends(get_db), current_user: str = Depends(get_current_user)):\n    # current_user masih berupa email\n    user = db.query(User).filter(User.email == current_user).first()\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n\n    total_users = db.query(User).count()\n    total_votes = db.query(Vote).count()\n    has_voted = db.query(Vote).filter(Vote.user_id == user.id).first() is not None\n\n    return {\n        \"total_users\": total_users,\n        \"total_votes\": total_votes,\n        \"has_voted\": has_voted\n    }\n\n@app.post(\"/voting-period\", response_model=VotingPeriodResponse)\ndef create_voting_period(period: VotingPeriodCreate, db: Session = Depends(get_db)):\n    new_period = models.VotingPeriod(\n        start_date=to_utc(period.start_date),\n        end_date=to_utc(period.end_date)\n    )\n    db.add(new_period)\n    db.commit()\n    db.refresh(new_period)\n    return new_period\n\n@app.get(\"/voting-period\", response_model=List[VotingPeriodResponse])\ndef get_voting_periods(db: Session = Depends(get_db)):\n    return db.query(models.VotingPeriod).all()\n\n@app.get(\"/voting-period/{period_id}\", response_model=VotingPeriodResponse)\ndef get_voting_period(period_id: int, db: Session = Depends(get_db)):\n    period = db.query(models.VotingPeriod).filter(models.VotingPeriod.id == period_id).first()\n    if not period:\n        raise HTTPException(status_code=404, detail=\"Voting period not found\")\n    return period\n\n@app.put(\"/voting-period/{period_id}\", response_model=VotingPeriodResponse)\ndef update_voting_period(period_id: int, period: VotingPeriodCreate, db: Session = Depends(get_db)):\n    db_period = db.query(models.VotingPeriod).filter(models.VotingPeriod.id == period_id).first()\n    if not db_period:\n        raise HTTPException(status_code=404, detail=\"Voting period not found\")\n    db_period.start_date = period.start_date\n    db_period.end_date = period.end_date\n    db.commit()\n    db.refresh(db_period)\n    return db_period\n\n@app.delete(\"/voting-period/{period_id}\")\ndef delete_voting_period(period_id: int, db: Session = Depends(get_db)):\n    db_period = db.query(models.VotingPeriod).filter(models.VotingPeriod.id == period_id).first()\n    if not db_period:\n        raise HTTPException(status_code=404, detail=\"Voting period not found\")\n    db.delete(db_period)\n    db.commit()\n    return {\"detail\": \"Voting period deleted\"}\n\n@app.options(\"/{path:path}\")\nasync def option_handler(path: str):\n    return {\"message\" : \"OK\"}\n\n","size_bytes":15379},"backend/app/models.py":{"content":"from sqlalchemy import Column, Integer, String, Boolean, DateTime, ForeignKey, UniqueConstraint\nfrom sqlalchemy.orm import relationship\nfrom .database import Base \nimport datetime\n\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, unique=True, index=True, nullable=False)\n    email = Column(String, unique=True, index=True, nullable=False)  # tambahkan email\n    password = Column(String, nullable=False)\n    is_verified = Column(Boolean, default=False) \n    otp_code = Column(String, nullable=True)  # untuk menyimpan kode OTP\n\nclass Candidate(Base):\n    __tablename__ = \"candidates\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, nullable=False)\n    image = Column(String, nullable=True)      # URL gambar\n    visi_misi = Column(String, nullable=True)  # teks visi misi\n    votes = relationship(\"Vote\", back_populates=\"candidate\")\n\n\nclass Vote(Base):\n    __tablename__ = \"votes\"\n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    candidate_id = Column(Integer, ForeignKey(\"candidates.id\"))\n\n    candidate = relationship(\"Candidate\", back_populates=\"votes\")\n\n    __table_args__ = (\n        UniqueConstraint(\"user_id\", name=\"unique_user_vote\"),  # ⛔ user hanya bisa 1x vote\n    )\nclass VotingPeriod(Base):\n    __tablename__ = \"voting_periods\"\n    id = Column(Integer, primary_key=True, index=True)\n    start_date = Column(DateTime(timezone=True), nullable=False, default=datetime.datetime.utcnow)\n    end_date = Column(DateTime(timezone=True), nullable=False)\n","size_bytes":1639},"backend/app/schemas.py":{"content":"from pydantic import BaseModel, EmailStr\nfrom pydantic import BaseModel\n\nclass VerifyOTP(BaseModel):\n    email: str\n    otp: str\n\nclass UserCreate(BaseModel):\n    name: str\n    email: EmailStr\n    password: str\n\nclass UserLogin(BaseModel):\n    email: EmailStr\n    password: str\n\nclass UserResponse(BaseModel):\n    id: int\n    email: EmailStr\n\n    class Config:\n        from_attributes = True\n\nclass CandidateCreate(BaseModel):\n    name: str\n    image: str | None = None\n    visi_misi: str | None = None\n    \n","size_bytes":508},"frontend/src/App.css":{"content":"#root {\n  max-width: 1860px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"frontend/src/App.jsx":{"content":"import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from \"react-router-dom\";\nimport LoginPage from \"./pages/LoginPage\";\nimport RegisterPage from \"./pages/RegisterPage\";\nimport ConnectWalletPage from \"./pages/ConnectWalletPage\"; // ✅ halaman connect wallet\nimport HomePage from \"./pages/HomePage\";\nimport StatistikPage from \"./pages/StatistikPage\";\nimport ProfilePage from \"./pages/ProfilePage\";\nimport ProtectedRoute from \"./components/ProtectedRoute\";\nimport Navbar from \"./components/Navbar\";\n\nexport default function App() {\n  return (\n    <Router>\n      <Routes>\n        {/* halaman publik */}\n        <Route path=\"/login\" element={<LoginPage />} />\n        <Route path=\"/register\" element={<RegisterPage />} />\n\n        {/* halaman connect wallet */}\n        <Route\n          path=\"/connect-wallet\"\n          element={\n            <ProtectedRoute>\n              <ConnectWalletPage />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* halaman yang butuh login */}\n        <Route\n          path=\"/home\"\n          element={\n            <ProtectedRoute>\n              <>\n                <Navbar />\n                <HomePage />\n              </>\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/statistik\"\n          element={\n            <ProtectedRoute>\n              <>\n                <Navbar />\n                <StatistikPage />\n              </>\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/profile\"\n          element={\n            <ProtectedRoute>\n              <>\n                <Navbar />\n                <ProfilePage />\n              </>\n            </ProtectedRoute>\n          }\n        />\n\n        {/* default → redirect ke login */}\n        <Route path=\"*\" element={<Navigate to=\"/login\" replace />} />\n      </Routes>\n    </Router>\n  );\n}\n","size_bytes":1893},"frontend/src/index.css":{"content":"/* Reset dasar */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-family: Arial, Helvetica, sans-serif;\n}\n\nbody {\n  background-color: #0a0a0a; /* dark theme */\n  color: #f5f5f5;\n  line-height: 1.6;\n  min-height: 100vh; /* full tinggi layar */\n  padding: 2cm; /* ruang dalam */\n  margin: 0; /* biar ga dobel sama padding */\n  box-sizing: border-box;\n}\n\n/* Navbar */\nnav {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px 30px;\n  background-color: #2563eb;\n}\n\nnav h2 {\n  color: white;\n  font-size: 1.5rem;\n}\n\nnav a {\n  margin: 0 15px;\n  color: white;\n  text-decoration: none;\n  font-weight: bold;\n}\n\nnav a:hover {\n  text-decoration: underline;\n}\n\n/* Container */\n.container {\n  max-width: 1200px;\n  margin: 30px auto;\n  padding: 0 20px;\n}\n\n/* Voting Card */\n.vote-card {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: white;\n  padding: 15px 20px;\n  margin-bottom: 15px;\n  border-radius: 8px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n.vote-card button {\n  background-color: #2563eb;\n  color: white;\n  border: none;\n  padding: 8px 15px;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: background 0.2s ease;\n}\n\n.vote-card button:hover {\n  background-color: #1d4ed8;\n}\n\n/* Layout khusus halaman auth */\n.auth-container {\n  min-height: 100vh;               \n  display: flex;\n  justify-content: center;         \n  align-items: center;             \n  background-color: #f3f4f6;      \n}\n\n.auth-box {\n  background: white;\n  padding: 30px;\n  border-radius: 8px;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 400px;\n}\n\n.auth-form {\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n}\n\n.auth-form input {\n  margin-bottom: 15px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 6px;\n}\n\n.auth-form button {\n  background-color: #2563eb;\n  color: white;\n  border: none;\n  padding: 10px;\n  border-radius: 6px;\n  cursor: pointer;\n}\n\n.auth-form button:hover {\n  background-color: #1d4ed8;\n}\n\n\n\n/* Responsif */\n@media (max-width: 768px) {\n  nav {\n    flex-direction: column;\n    text-align: center;\n  }\n\n  nav a {\n    display: block;\n    margin: 10px 0;\n  }\n\n  .vote-card {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  .vote-card button {\n    margin-top: 10px;\n    width: 100%;\n  }\n}\n","size_bytes":2343},"frontend/src/main.jsx":{"content":"import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App.jsx'\n\ncreateRoot(document.getElementById('root')).render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n)\n","size_bytes":229},"smart-contract/contracts/Lock.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n  uint public unlockTime;\n  address payable public owner;\n\n  event Withdrawal(uint amount, uint when);\n\n  constructor(uint _unlockTime) payable {\n    require(\n      block.timestamp < _unlockTime,\n      \"Unlock time should be in the future\"\n    );\n\n    unlockTime = _unlockTime;\n    owner = payable(msg.sender);\n  }\n\n  function withdraw() public {\n    // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n    // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n    require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n    require(msg.sender == owner, \"You aren't the owner\");\n\n    emit Withdrawal(address(this).balance, block.timestamp);\n\n    owner.transfer(address(this).balance);\n  }\n}\n","size_bytes":942},"smart-contract/contracts/Voting.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.28;\n\ncontract Voting {\n    struct Candidate {\n        string name;\n        uint votes;\n    }\n\n    Candidate[] public candidates;\n    mapping(address => bool) public hasVoted;\n\n    function addCandidate(string memory _name) public {\n        candidates.push(Candidate(_name, 0));\n    }\n\n    function vote(uint _candidateIndex) public {\n        require(!hasVoted[msg.sender], \"You already voted\");\n        require(_candidateIndex < candidates.length, \"Invalid candidate\");\n\n        candidates[_candidateIndex].votes += 1;\n        hasVoted[msg.sender] = true;\n    }\n\n    function getVotes(uint _candidateIndex) public view returns (uint) {\n        require(_candidateIndex < candidates.length, \"Invalid candidate\");\n        return candidates[_candidateIndex].votes;\n    }\n\n    function getCandidates() public view returns (string[] memory) {\n        string[] memory names = new string[](candidates.length);\n        for (uint i = 0; i < candidates.length; i++) {\n            names[i] = candidates[i].name;\n        }\n        return names;\n    }\n}","size_bytes":1093},"smart-contract/scripts/deploy.js":{"content":"const hre = require(\"hardhat\");\n\nasync function main() {\n  const Voting = await hre.ethers.getContractFactory(\"Voting\");\n  const voting = await Voting.deploy();\n  await voting.waitForDeployment();\n\n  console.log(\"Voting deployed to:\", await voting.getAddress());\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n","size_bytes":344},"smart-contract/scripts/vote.js":{"content":"const hre = require(\"hardhat\");\n\nasync function main() {\n  // ganti dengan alamat kontrak hasil deploy\n  const contractAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"; \n\n  const Voting = await hre.ethers.getContractFactory(\"Voting\");\n  const voting = await Voting.attach(contractAddress);\n\n  // tambah kandidat\n  await voting.addCandidate(\"Alice\");\n  await voting.addCandidate(\"Bob\");\n\n  // vote untuk kandidat 0 (Alice)\n  await voting.vote(0);\n\n  // cek jumlah suara\n  const votesAlice = await voting.getVotes(0);\n  const votesBob = await voting.getVotes(1);\n  console.log(\"Alice votes:\", votesAlice.toString());\n  console.log(\"Bob votes:\", votesBob.toString());\n\n  // cek daftar kandidat\n  const candidates = await voting.getCandidates();\n  console.log(\"Candidates:\", candidates);\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n","size_bytes":871},"smart-contract/test/Lock.js":{"content":"const {\n  time,\n  loadFixture,\n} = require(\"@nomicfoundation/hardhat-toolbox/network-helpers\");\nconst { anyValue } = require(\"@nomicfoundation/hardhat-chai-matchers/withArgs\");\nconst { expect } = require(\"chai\");\n\ndescribe(\"Lock\", function () {\n  // We define a fixture to reuse the same setup in every test.\n  // We use loadFixture to run this setup once, snapshot that state,\n  // and reset Hardhat Network to that snapshot in every test.\n  async function deployOneYearLockFixture() {\n    const ONE_YEAR_IN_SECS = 365 * 24 * 60 * 60;\n    const ONE_GWEI = 1_000_000_000;\n\n    const lockedAmount = ONE_GWEI;\n    const unlockTime = (await time.latest()) + ONE_YEAR_IN_SECS;\n\n    // Contracts are deployed using the first signer/account by default\n    const [owner, otherAccount] = await ethers.getSigners();\n\n    const Lock = await ethers.getContractFactory(\"Lock\");\n    const lock = await Lock.deploy(unlockTime, { value: lockedAmount });\n\n    return { lock, unlockTime, lockedAmount, owner, otherAccount };\n  }\n\n  describe(\"Deployment\", function () {\n    it(\"Should set the right unlockTime\", async function () {\n      const { lock, unlockTime } = await loadFixture(deployOneYearLockFixture);\n\n      expect(await lock.unlockTime()).to.equal(unlockTime);\n    });\n\n    it(\"Should set the right owner\", async function () {\n      const { lock, owner } = await loadFixture(deployOneYearLockFixture);\n\n      expect(await lock.owner()).to.equal(owner.address);\n    });\n\n    it(\"Should receive and store the funds to lock\", async function () {\n      const { lock, lockedAmount } = await loadFixture(\n        deployOneYearLockFixture,\n      );\n\n      expect(await ethers.provider.getBalance(lock.target)).to.equal(\n        lockedAmount,\n      );\n    });\n\n    it(\"Should fail if the unlockTime is not in the future\", async function () {\n      // We don't use the fixture here because we want a different deployment\n      const latestTime = await time.latest();\n      const Lock = await ethers.getContractFactory(\"Lock\");\n      await expect(Lock.deploy(latestTime, { value: 1 })).to.be.revertedWith(\n        \"Unlock time should be in the future\",\n      );\n    });\n  });\n\n  describe(\"Withdrawals\", function () {\n    describe(\"Validations\", function () {\n      it(\"Should revert with the right error if called too soon\", async function () {\n        const { lock } = await loadFixture(deployOneYearLockFixture);\n\n        await expect(lock.withdraw()).to.be.revertedWith(\n          \"You can't withdraw yet\",\n        );\n      });\n\n      it(\"Should revert with the right error if called from another account\", async function () {\n        const { lock, unlockTime, otherAccount } = await loadFixture(\n          deployOneYearLockFixture,\n        );\n\n        // We can increase the time in Hardhat Network\n        await time.increaseTo(unlockTime);\n\n        // We use lock.connect() to send a transaction from another account\n        await expect(lock.connect(otherAccount).withdraw()).to.be.revertedWith(\n          \"You aren't the owner\",\n        );\n      });\n\n      it(\"Shouldn't fail if the unlockTime has arrived and the owner calls it\", async function () {\n        const { lock, unlockTime } = await loadFixture(\n          deployOneYearLockFixture,\n        );\n\n        // Transactions are sent using the first signer by default\n        await time.increaseTo(unlockTime);\n\n        await expect(lock.withdraw()).not.to.be.reverted;\n      });\n    });\n\n    describe(\"Events\", function () {\n      it(\"Should emit an event on withdrawals\", async function () {\n        const { lock, unlockTime, lockedAmount } = await loadFixture(\n          deployOneYearLockFixture,\n        );\n\n        await time.increaseTo(unlockTime);\n\n        await expect(lock.withdraw())\n          .to.emit(lock, \"Withdrawal\")\n          .withArgs(lockedAmount, anyValue); // We accept any value as `when` arg\n      });\n    });\n\n    describe(\"Transfers\", function () {\n      it(\"Should transfer the funds to the owner\", async function () {\n        const { lock, unlockTime, lockedAmount, owner } = await loadFixture(\n          deployOneYearLockFixture,\n        );\n\n        await time.increaseTo(unlockTime);\n\n        await expect(lock.withdraw()).to.changeEtherBalances(\n          [owner, lock],\n          [lockedAmount, -lockedAmount],\n        );\n      });\n    });\n  });\n});\n","size_bytes":4327},"backend/app/routes/auth.py":{"content":"from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom .. import models, schemas\nfrom ..database import SessionLocal\nfrom ..utils.hashing import hash_password, verify_password\nfrom ..utils.jwt_handler import create_access_token\n\nrouter = APIRouter(prefix=\"/auth\", tags=[\"Auth\"])\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n@router.post(\"/register\")\ndef register(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    existing_user = db.query(models.User).filter(models.User.email == user.email).first()\n    if existing_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n\n    new_user = models.User(\n        name=user.name,\n        email=user.email,\n        password=hash_password(user.password)\n    )\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n    return {\"message\": \"User registered successfully\", \"user\": {\"id\": new_user.id, \"email\": new_user.email}}\n\n@router.post(\"/login\")\ndef login(user: schemas.UserLogin, db: Session = Depends(get_db)):\n    db_user = db.query(models.User).filter(models.User.email == user.email).first()\n    if not db_user or not verify_password(user.password, db_user.password):\n        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\n\n    token = create_access_token({\"sub\": db_user.email})\n    return {\"message\": \"Login successful\", \"access_token\": token}\n","size_bytes":1456},"backend/app/utils/__init__.py":{"content":"","size_bytes":0},"backend/app/utils/email_utils.py":{"content":"from fastapi_mail import FastMail, MessageSchema, ConnectionConfig\nfrom pydantic import BaseModel, EmailStr\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nconf = ConnectionConfig(\n    MAIL_USERNAME = os.getenv(\"MAIL_USERNAME\"),\n    MAIL_PASSWORD = os.getenv(\"MAIL_PASSWORD\"),\n    MAIL_FROM = os.getenv(\"MAIL_FROM\"),\n    MAIL_PORT = int(os.getenv(\"MAIL_PORT\")),\n    MAIL_SERVER = os.getenv(\"MAIL_SERVER\"),\n    MAIL_TLS = os.getenv(\"MAIL_TLS\") == \"True\",\n    MAIL_SSL = os.getenv(\"MAIL_SSL\") == \"True\",\n    USE_CREDENTIALS = True,\n)\n\nasync def send_otp_email(email_to: str, otp: str):\n    message = MessageSchema(\n        subject=\"Your OTP Code\",\n        recipients=[email_to],\n        body=f\"Kode OTP Anda: {otp}\",\n        subtype=\"plain\"\n    )\n\n    fm = FastMail(conf)\n    await fm.send_message(message)\n","size_bytes":814},"backend/app/utils/hashing.py":{"content":"import bcrypt\n\ndef hash_password(password: str) -> str:\n    \"\"\"Hash password max 72 bytes (bcrypt)\"\"\"\n    max_bytes = 72\n    password_bytes = password.encode(\"utf-8\")[:max_bytes]\n    \n    # Generate salt dan hash\n    salt = bcrypt.gensalt()\n    hashed = bcrypt.hashpw(password_bytes, salt)\n    return hashed.decode(\"utf-8\")\n\n\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    \"\"\"Verify plain password dengan hashed password\"\"\"\n    password_bytes = plain_password.encode(\"utf-8\")[:72]\n    hashed_bytes = hashed_password.encode(\"utf-8\")\n    return bcrypt.checkpw(password_bytes, hashed_bytes)\n","size_bytes":617},"backend/app/utils/jwt_handler.py":{"content":"from jose import JWTError, jwt\nimport os\nfrom datetime import datetime, timedelta\nfrom dotenv import load_dotenv\nfrom fastapi import HTTPException, status\n\nload_dotenv()\n\nSECRET_KEY = os.getenv(\"JWT_SECRET\", \"supersecretjwt\")\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=15))\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\ndef decode_access_token(token: str):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        return payload\n    except JWTError:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Token tidak valid atau expired\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )","size_bytes":953},"frontend/src/components/CandidateCard.jsx":{"content":"import React, { useState } from \"react\";\nimport \"../styles/CandidateCard.css\";\n\nexport default function CandidateCard({ image, name, visiMisi }) {\n  const [flipped, setFlipped] = useState(false);\n\n  return (\n    <div className=\"card\" onClick={() => setFlipped(!flipped)}>\n      <div className={`card-inner ${flipped ? \"flipped\" : \"\"}`}>\n        <div className=\"card-front\">\n          <img src={image} alt={name} />\n          <h3>{name}</h3>\n        </div>\n        <div className=\"card-back\">\n          <h4>Visi & Misi</h4>\n          <p>{visiMisi}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":597},"frontend/src/components/Navbar.jsx":{"content":"import React from \"react\";\nimport { useNavigate } from \"react-router-dom\"; // ✅ import navigate\nimport \"../styles/Navbar.css\";\n\nexport default function Navbar() {\n  const navigate = useNavigate(); // ✅ buat instance navigate\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\"); // hapus token\n    navigate(\"/login\");              // pindah ke login\n    window.location.reload();        // optional, biar langsung refresh juga\n  };\n\n  return (\n    <nav className=\"navbar\">\n      <div className=\"logo\">NEOVOTE</div>\n      <ul className=\"nav-links\">\n        <li>\n          <a href=\"/home\">Home</a>\n        </li>\n        <li>\n          <a href=\"/statistik\">Statistik</a>\n        </li>\n        <li>\n          <a href=\"/profile\">Profile</a>\n        </li>\n        <li>\n          <button onClick={handleLogout} className=\"special-btn\">\n            Logout\n          </button>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n","size_bytes":932},"frontend/src/components/ProtectedRoute.jsx":{"content":"import { Navigate } from \"react-router-dom\";\n\nexport default function ProtectedRoute({ children }) {\n  const token = localStorage.getItem(\"token\");\n\n  if (!token) {\n    return <Navigate to=\"/login\" replace />;\n  }\n\n  return children;\n}\n","size_bytes":236},"frontend/src/pages/AboutPage.jsx":{"content":"export default function AboutPage() {\n  return (\n    <div style={{ padding: 20 }}>\n      <h1>ℹ️ About This App</h1>\n      <p>\n        This is a simple blockchain-based voting app built with React for the\n        frontend and Solidity for smart contracts.\n      </p>\n    </div>\n  );\n}\n","size_bytes":288},"frontend/src/pages/ConnectWalletPage.jsx":{"content":"import React, { createContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/LoginPage.css\"; // Pakai CSS login agar konsisten\nimport { ethers } from \"ethers\";\nimport VotingABI from \"../contracts/Voting.json\";\n\nexport default function ConnectWalletPage() {\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [connected, setConnected] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const handleConnectWallet = async () => {\n    if (!window.ethereum) {\n      alert(\"⚠️ MetaMask belum terpasang!\");\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      setWalletAddress(accounts[0]);\n      setConnected(true);\n      alert(`✅ Wallet connected: ${accounts[0]}`);\n    } catch (err) {\n      console.error(err);\n      alert(\"⚠️ Gagal connect wallet!\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDisconnectWallet = () => {\n    setWalletAddress(\"\");\n    setConnected(false);\n    alert(\"🔌 Wallet disconnected\");\n  };\n\n  const handleProceed = () => {\n    if (!connected) {\n      alert(\"⚠️ Harap connect wallet terlebih dahulu!\");\n      return;\n    }\n    navigate(\"/home\"); // Redirect ke home atau voting page\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-card\">\n        <div className=\"login-header\">\n          <div className=\"logo-icon\">💎</div>\n          <h2>Connect Wallet</h2>\n          <p>Sign in with your wallet to vote</p>\n        </div>\n\n        <div className=\"login-form\">\n          <button\n            className=\"login-btn btn\"\n            onClick={connected ? handleDisconnectWallet : handleConnectWallet}\n            disabled={loading}\n          >\n            {loading\n              ? \"Loading...\"\n              : connected\n              ? `Disconnect Wallet`\n              : \"Connect Wallet\"}\n          </button>\n\n          {connected && (\n            <p\n              style={{\n                color: \"#00ff88\",\n                marginTop: \"16px\",\n                wordBreak: \"break-all\",\n              }}\n            >\n              Connected: {walletAddress}\n            </p>\n          )}\n\n          <button\n            className=\"login-btn btn\"\n            style={{ marginTop: \"24px\" }}\n            onClick={handleProceed}\n          >\n            Proceed to Voting\n          </button>\n        </div>\n      </div>\n\n      <div className=\"background-effects\">\n        <div className=\"glow-orb glow-orb-1\"></div>\n        <div className=\"glow-orb glow-orb-2\"></div>\n        <div className=\"glow-orb glow-orb-3\"></div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2757},"frontend/src/pages/HomePage.jsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport CandidateCard from \"../components/CandidateCard\";\nimport \"../styles/HomePage.css\";\n\nexport default function HomePage() {\n  const [candidates, setCandidates] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [stats, setStats] = useState(null);\n  const [period, setPeriod] = useState(null);\n  const [timeLeft, setTimeLeft] = useState({});\n  const token = localStorage.getItem(\"token\"); // token disimpan setelah login\n\n  // Ambil kandidat\n  useEffect(() => {\n    fetch(`${import.meta.env.VITE_API_URL}/candidates`)\n      .then((res) => res.json())\n      .then((data) => {\n        setCandidates(data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.error(\"Error fetching candidates:\", err);\n        setLoading(false);\n      });\n  }, []);\n\n  // Ambil statistik\n  useEffect(() => {\n    if (token) {\n      fetch(`${import.meta.env.VITE_API_URL}/stats`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n        .then((res) => res.json())\n        .then((data) => setStats(data))\n        .catch((err) => console.error(\"Error fetching stats:\", err));\n    }\n  }, [token]);\n\n  // Handle vote\n  const handleVote = async (candidateId) => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"Anda harus login dulu untuk vote\");\n        return;\n      }\n\n      const res = await fetch(`${import.meta.env.VITE_API_URL}/vote`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ candidate_id: candidateId }),\n      });\n\n      const data = await res.json(); // ⬅️ parse dulu responsenya\n\n      if (!res.ok) {\n        if (data.detail === \"User sudah voting\") {\n          alert(\"⚠️ Kamu sudah memberikan suara, tidak bisa vote lagi.\");\n          return;\n        }\n        throw new Error(data.detail || \"GagalVote\");\n      }\n\n      // Hanya tampilkan alert sukses sekali saja (vote pertama)\n      alert(\"✅ Vote berhasil!\");\n      console.log(\"Vote response:\", data);\n    } catch (err) {\n      console.error(\"Error voting:\", err);\n      alert(err.message);\n    }\n  };\n\n  // Ambil periode voting\n  useEffect(() => {\n    fetch(`${import.meta.env.VITE_API_URL}/voting-period`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.length > 0) {\n          setPeriod(data[0]); // ambil periode pertama\n        }\n      })\n      .catch(console.error);\n  }, []);\n\n  // Countdown realtime\n  useEffect(() => {\n    if (!period) return;\n\n    const interval = setInterval(() => {\n      // Pakai UTC agar akurat\n      const start = new Date(period.start_date + \"Z\").getTime();\n      const end = new Date(period.end_date + \"Z\").getTime();\n      const now = new Date().getTime();\n\n      let distance;\n      let status;\n\n      if (now < start) {\n        distance = start - now;\n        status = \"Belum Dibuka\";\n      } else if (now >= start && now <= end) {\n        distance = end - now;\n        status = \"Sedang Berlangsung\";\n      } else {\n        distance = 0;\n        status = \"Selesai\";\n      }\n\n      const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      const hours = Math.floor(\n        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n      setTimeLeft({ days, hours, minutes, seconds, status });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [period]);\n\n  // ==================================================||=================================================\n  return (\n    <div className=\"homepage\">\n      <h1 className=\"homepage-title\">NEOVOTE GOVERNANCE DAPP</h1>\n      <h2 className=\"homepage-subtitle\">Voting Cepat, Transparan, dan Aman</h2>\n      {/* Countdown Section */}\n      {period && (\n        <div className=\"countdown\">\n          <h2>⏳ Countdown Pemilihan</h2>\n          <div className=\"countdown-timer\">\n            <div>\n              <span>{timeLeft.days ?? 0}</span>\n              <p>Hari</p>\n            </div>\n            <div>\n              <span>{timeLeft.hours ?? 0}</span>\n              <p>Jam</p>\n            </div>\n            <div>\n              <span>{timeLeft.minutes ?? 0}</span>\n              <p>Menit</p>\n            </div>\n            <div>\n              <span>{timeLeft.seconds ?? 0}</span>\n              <p>Detik</p>\n            </div>\n          </div>\n          <br />\n          <h3>Pemilihan {timeLeft.status}</h3>\n        </div>\n      )}\n\n      {/* Candidate List */}\n      <div className=\"card-container\">\n        {loading ? (\n          <p>Memuat kandidat...</p>\n        ) : candidates.length > 0 ? (\n          candidates.map((c) => (\n            <div key={c.id} className=\"candidate-wrapper\">\n              <CandidateCard\n                image={c.image}\n                name={c.name}\n                visiMisi={c.visi_misi}\n              />\n              <button\n                className=\"vote-btn\"\n                onClick={() => {\n                  const confirmVote = window.confirm(\n                    `Apakah Anda yakin ingin memilih ${c.name}?`\n                  );\n                  if (confirmVote) {\n                    handleVote(c.id);\n                  }\n                }}\n              >\n                Vote {c.name}\n              </button>\n            </div>\n          ))\n        ) : (\n          <p>Tidak ada kandidat ditemukan.</p>\n        )}\n      </div>\n      {/* Statistik */}\n      <div className=\"section-grid\">\n        <div className=\"info-voting\">\n          <h2>📢 Info Voting</h2>\n          <p>\n            🗓️ Periode:{\" \"}\n            {period\n              ? `${new Date(period.start_date).toLocaleString(\"id-ID\", {\n                  timeZone: \"Asia/Jakarta\",\n                })} - ${new Date(period.end_date).toLocaleString(\"id-ID\", {\n                  timeZone: \"Asia/Jakarta\",\n                })}`\n              : \"-\"}\n          </p>\n          <p>👥 Pemilih Terdaftar: {stats ? stats.total_users : \"-\"}</p>\n          <p>\n            ✅ Status Anda: {stats?.has_voted ? \"Sudah Voting\" : \"Belum Voting\"}\n          </p>\n        </div>\n\n        <div className=\"statistik\">\n          <h2>📊 Statistik Singkat</h2>\n          <p>\n            Jumlah pemilih saat ini:{\" \"}\n            {stats ? `${stats.total_votes}/${stats.total_users}` : \"-\"}\n          </p>\n          <div className=\"progress-bar\">\n            <div\n              className=\"progress\"\n              style={{\n                width: stats\n                  ? `${(stats.total_votes / stats.total_users) * 100}%`\n                  : \"0%\",\n              }}\n            ></div>\n          </div>\n        </div>\n\n        <div className=\"aturan\">\n          <h2>⚖️ Aturan</h2>\n          <ul>\n            <li>Setiap akun hanya dapat memberikan 1 suara.</li>\n            <li>Pilihan yang sudah dikirim tidak dapat diubah.</li>\n            <li>Voting bersifat rahasia dan terenkripsi.</li>\n            <li>Gunakan hak suara Anda dengan bijak.</li>\n          </ul>\n        </div>\n      </div>\n      <footer className=\"footer\">\n        <p>© 2025 NEOVOTE - Sistem Voting Terdesentralisasi</p>\n      </footer>\n      \n      <div className=\"background-effects\">\n        <div className=\"glow-orb glow-orb-1\"></div>\n        <div className=\"glow-orb glow-orb-2\"></div>\n        <div className=\"glow-orb glow-orb-3\"></div>\n      </div>\n    </div>\n\n    \n  );\n}\n","size_bytes":7571},"frontend/src/pages/LoginPage.jsx":{"content":"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/LoginPage.css\";\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/login`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        alert(`❌ ${data.detail}`);\n      } else {\n        alert(`✅ ${data.message || \"Login berhasil\"}`);\n\n        // Simpan token (yang dikirim backend, misalnya data.access_token)\n        if (data.access_token) {\n          localStorage.setItem(\"token\", data.access_token);\n        }\n\n        // Redirect ke /home tanpa reload full page\n        navigate(\"/connect-wallet\");\n      }\n    } catch (err) {\n      alert(\"⚠️ Gagal terhubung ke server!\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-card\">\n        <div className=\"login-header\">\n          <div className=\"logo-icon\">⚡</div>\n          <h2>Sign In</h2>\n          <p>Access your account</p>\n        </div>\n\n        <form\n          className=\"login-form\"\n          id=\"loginForm\"\n          onSubmit={handleSubmit}\n          noValidate\n        >\n          <div className=\"form-group\">\n            <div className=\"input-wrapper\">\n              <input\n                type=\"email\"\n                id=\"email\"\n                name=\"email\"\n                required\n                autoComplete=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              <label htmlFor=\"email\">Email</label>\n              <span className=\"input-line\"></span>\n            </div>\n            <span className=\"error-message\" id=\"emailError\"></span>\n          </div>\n\n          <div className=\"form-group\">\n            <div className=\"input-wrapper password-wrapper\">\n              <input\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                required\n                autoComplete=\"current-password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n              <label htmlFor=\"password\">Password</label>\n              \n              <span className=\"input-line\"></span>\n            </div>\n            <span className=\"error-message\" id=\"passwordError\"></span>\n          </div>\n\n          <div className=\"form-options\">\n            <div className=\"remember-wrapper\">\n              <input type=\"checkbox\" id=\"remember\" name=\"remember\" />\n              <label htmlFor=\"remember\" className=\"checkbox-label\">\n                <span className=\"custom-checkbox\"></span>\n                Keep me signed in\n              </label>\n            </div>\n            <a href=\"#\" className=\"forgot-password\">\n              Forgot password?\n            </a>\n          </div>\n\n          <button type=\"submit\" className=\"login-btn btn\" disabled={loading}>\n            {loading ? \"Loading...\" : \"Sign In\"}\n          </button>\n        </form>\n\n        <div className=\"signup-link\">\n          <p>\n            New here? <Link to=\"/register\">Create an account</Link>\n          </p>\n        </div>\n\n        <div className=\"success-message\" id=\"successMessage\">\n          <div className=\"success-icon\">✓</div>\n          <h3>Welcome back!</h3>\n          <p>Redirecting to your dashboard...</p>\n        </div>\n      </div>\n\n      <div className=\"background-effects\">\n        <div className=\"glow-orb glow-orb-1\"></div>\n        <div className=\"glow-orb glow-orb-2\"></div>\n        <div className=\"glow-orb glow-orb-3\"></div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4102},"frontend/src/pages/ProfilePage.jsx":{"content":"import React from \"react\";\n\nfunction ProfilePage() {\n  return <h1>Dalam Tahap Pengembangan</h1>;\n}\n\nexport default ProfilePage;\n","size_bytes":128},"frontend/src/pages/RegisterPage.jsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport \"../styles/LoginPage.css\";\n\nexport default function RegisterPage() {\n  const [step, setStep] = useState(\"register\"); // register | otp\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [otp, setOtp] = useState(\"\");\n  const [generatedOtp, setGeneratedOtp] = useState(\"\");\n\n  // Step 1: Register + request OTP\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (password !== confirmPassword) {\n      alert(\"❌ Passwords do not match!\");\n      return;\n    }\n\n    // 🔹 Validasi password di frontend\n    if (password.length < 8) {\n      alert(\"❌ Password minimal 8 karakter!\");\n      return;\n    }\n    if (!/[A-Z]/.test(password)) {\n      alert(\"❌ Password harus ada huruf besar!\");\n      return;\n    }\n    if (!/[0-9]/.test(password)) {\n      alert(\"❌ Password harus ada angka!\");\n      return;\n    }\n    if (!/[@$!%*?&]/.test(password)) {\n      alert(\"❌ Password harus ada simbol (@$!%*?&)\");\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/register`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ name, email, password }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        alert(`❌ ${data.detail || \"Gagal register\"}`);\n        return;\n      }\n\n      // OTP sudah dikirim langsung ke email, frontend tidak perlu tahu OTP\n      alert(\n        `✅ Registrasi berhasil! OTP telah dikirim ke email Anda (${email}).`\n      );\n      setStep(\"otp\"); // lanjut ke step OTP\n    } catch (err) {\n      console.error(err);\n      alert(\"⚠️ Terjadi kesalahan server!\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Step 2: Verify OTP\n  const handleVerifyOtp = async (e) => {\n    e.preventDefault();\n\n    setLoading(true);\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/verify-otp`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ email, otp }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        alert(`❌ ${data.detail || \"OTP salah\"}`);\n      } else {\n        alert(\"✅ OTP benar! Akun terverifikasi.\");\n        window.location.href = \"/\"; // balik ke login\n      }\n    } catch (err) {\n      console.error(err);\n      alert(\"⚠️ Gagal terhubung ke server!\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const [resendCooldown, setResendCooldown] = useState(0);\n\n  useEffect(() => {\n    if (resendCooldown > 0) {\n      const timer = setInterval(() => {\n        setResendCooldown((prev) => prev - 1);\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n  }, [resendCooldown]);\n\n  // Step 3: Resend OTP\n  const handleResendOtp = async () => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/resend-otp`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ email }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        alert(\"✅ OTP baru dikirim ke email\" + ` (${email}) OTP: ${data.otp}`);\n        setResendCooldown(120);\n      } else {\n        alert(data.detail || \"Gagal mengirim OTP\");\n      }\n    } catch (err) {\n      console.error(err);\n      alert(\"⚠️ Terjadi kesalahan saat mengirim OTP\");\n    }\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-card\">\n        <div className=\"login-header\">\n          <div className=\"logo-icon\">⚡</div>\n          <h2>{step === \"register\" ? \"Create Account\" : \"Verify OTP\"}</h2>\n          <p>\n            {step === \"register\"\n              ? \"Register to start voting\"\n              : \"Enter the code we sent to your email\"}\n          </p>\n        </div>\n\n        {/* Step Indicator */}\n        <div className=\"step-indicator\">\n          <div className={`step ${step === \"register\" ? \"active\" : \"\"}`}>\n            1. Register\n          </div>\n          <div className={`step ${step === \"otp\" ? \"active\" : \"\"}`}>2. OTP</div>\n        </div>\n\n        {/* Form Register */}\n        {step === \"register\" && (\n          <form className=\"login-form\" onSubmit={handleSubmit} noValidate>\n            {/* Name */}\n            <div className=\"form-group\">\n              <div className=\"input-wrapper\">\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  required\n                  autoComplete=\"name\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                />\n                <label htmlFor=\"name\">Full Name</label>\n                <span className=\"input-line\"></span>\n              </div>\n            </div>\n\n            {/* Email */}\n            <div className=\"form-group\">\n              <div className=\"input-wrapper\">\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  required\n                  autoComplete=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n                <label htmlFor=\"email\">Email</label>\n                <span className=\"input-line\"></span>\n              </div>\n            </div>\n\n            {/* Password */}\n            <div className=\"form-group\">\n              <div className=\"input-wrapper password-wrapper\">\n                <input\n                  type=\"password\"\n                  id=\"password\"\n                  required\n                  autoComplete=\"new-password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                />\n                <label htmlFor=\"password\">Password</label>\n                <span className=\"input-line\"></span>\n              </div>\n            </div>\n\n            {/* Confirm Password */}\n            <div className=\"form-group\">\n              <div className=\"input-wrapper password-wrapper\">\n                <input\n                  type=\"password\"\n                  id=\"confirmPassword\"\n                  required\n                  autoComplete=\"new-password\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                />\n                <label htmlFor=\"confirmPassword\">Confirm Password</label>\n                <span className=\"input-line\"></span>\n              </div>\n            </div>\n\n            <button type=\"submit\" className=\"login-btn btn\" disabled={loading}>\n              {loading ? \"Registering...\" : \"Sign Up\"}\n            </button>\n          </form>\n        )}\n\n        {/* Link ke Login */}\n        {step === \"register\" && (\n          <div className=\"signup-link\">\n            <p>\n              Already have an account? <a href=\"/\">Sign in</a>\n            </p>\n          </div>\n        )}\n\n        {/* Step OTP */}\n        {step === \"otp\" && (\n          <form className=\"login-form\" onSubmit={handleVerifyOtp}>\n            <div className=\"form-group\">\n              <div className=\"input-wrapper\">\n                <input\n                  type=\"text\"\n                  maxLength=\"6\"\n                  placeholder=\"Enter OTP\"\n                  value={otp}\n                  onChange={(e) => setOtp(e.target.value)}\n                  required\n                />\n                <span className=\"input-line\"></span>\n              </div>\n            </div>\n            <button type=\"submit\" className=\"login-btn btn\">\n              Verify OTP\n            </button>\n\n            {/* Kirim ulang OTP */}\n            <p\n              style={{\n                cursor: resendCooldown > 0 ? \"not-allowed\" : \"pointer\",\n                color: resendCooldown > 0 ? \"gray\" : \"blue\",\n                marginTop: \"10px\",\n              }}\n              onClick={() => {\n                if (resendCooldown === 0) {\n                  if (!email) {\n                    alert(\"Masukkan email dulu\");\n                    return;\n                  }\n                  handleResendOtp();\n                }\n              }}\n            >\n              {resendCooldown > 0\n                ? `Kirim ulang OTP dalam ${resendCooldown} detik`\n                : \"Kirim ulang OTP\"}\n            </p>\n          </form>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8585},"frontend/src/pages/ResultPage.jsx":{"content":"export default function ResultPage() {\n  return (\n    <div style={{ padding: 20 }}>\n      <h1>📊 Voting Results</h1>\n      <p>Results will be shown here (connected to backend later).</p>\n    </div>\n  );\n}\n","size_bytes":207},"frontend/src/pages/StatistikPage.jsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { Bar, Pie, Line } from \"react-chartjs-2\";\nimport \"../styles/Statistik.css\";\n\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  ArcElement,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  ArcElement,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport default function StatistikPage() {\n  const [stats, setStats] = useState(null);\n  const [results, setResults] = useState([]);\n\n  useEffect(() => {\n    const fetchStats = async () => {\n      try {\n        const token = localStorage.getItem(\"token\"); // pastikan simpan token pas login\n        const resStats = await fetch(`${import.meta.env.VITE_API_URL}/stats`, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        const dataStats = await resStats.json();\n        setStats(dataStats);\n\n        const resResults = await fetch(`${import.meta.env.VITE_API_URL}/results`);\n        const dataResults = await resResults.json();\n        setResults(dataResults);\n      } catch (err) {\n        console.error(\"Error fetch statistik:\", err);\n      }\n    };\n\n    fetchStats();\n  }, []);\n\n  if (!stats || results.length === 0) {\n    return <p>Loading statistik...</p>;\n  }\n\n  // data kandidat\n  const kandidatData = {\n    labels: results.map((r) => r.name),\n    datasets: [\n      {\n        label: \"Jumlah Suara\",\n        data: results.map((r) => r.total_votes),\n        backgroundColor: [\"#0ff\", \"#f0f\", \"#ff0\"],\n        borderColor: \"#111\",\n        borderWidth: 2,\n      },\n    ],\n  };\n\n  const pieData = {\n    labels: results.map((r) => r.name),\n    datasets: [\n      {\n        data: results.map((r) => r.total_votes),\n        backgroundColor: [\"#0ff\", \"#f0f\", \"#ff0\"],\n        borderWidth: 2,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"statistik-page\">\n      <h1 className=\"page-title\">📊 Statistik Voting NeoVote</h1>\n\n      <div className=\"statistik-info\">\n        <div className=\"stat-box\">\n          <h3>Total Pemilih</h3>\n          <p>{stats.total_users}</p>\n        </div>\n        <div className=\"stat-box\">\n          <h3>Sudah Voting</h3>\n          <p>{stats.total_votes}</p>\n        </div>\n        <div className=\"stat-box\">\n          <h3>Belum Voting</h3>\n          <p>{stats.total_users - stats.total_votes}</p>\n        </div>\n        <div className=\"stat-box\">\n          <h3>Partisipasi</h3>\n          <p>{((stats.total_votes / stats.total_users) * 100).toFixed(1)}%</p>\n        </div>\n      </div>\n\n      <div className=\"chart-container\">\n        <h2>Suara per Kandidat</h2>\n        <Bar data={kandidatData} />\n      </div>\n\n      <div className=\"chart-container\">\n        <h2>Proporsi Suara</h2>\n        <Pie data={pieData} />\n      </div>\n\n      <div className=\"background-effects\">\n        <div className=\"glow-orb glow-orb-1\"></div>\n        <div className=\"glow-orb glow-orb-2\"></div>\n        <div className=\"glow-orb glow-orb-3\"></div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3067},"frontend/src/pages/VotePage.jsx":{"content":"import { useState } from \"react\";\nimport \"../styles/HomePage.css\"; // ✅ pastikan file CSS ada\n\nexport default function VotePage() {\n  const [selected, setSelected] = useState(null);\n\n  const candidates = [\n    { id: 1, name: \"Alice\", desc: \"Calon dengan visi membangun masa depan.\" },\n    { id: 2, name: \"Bob\", desc: \"Mengutamakan transparansi dan integritas.\" },\n    { id: 3, name: \"Charlie\", desc: \"Berorientasi pada inovasi dan teknologi.\" },\n  ];\n\n  const handleVote = (id) => {\n    setSelected(id);\n    alert(`You voted for ${candidates.find((c) => c.id === id).name}`);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"page-title\">🗳️ Voting Page</h1>\n\n      <div className=\"card-grid\">\n        {candidates.map((c) => (\n          <div\n            key={c.id}\n            className={`vote-card ${selected === c.id ? \"selected\" : \"\"}`}\n          >\n            <h2>{c.name}</h2>\n            <p>{c.desc}</p>\n            <button onClick={() => handleVote(c.id)}>Vote</button>\n          </div>\n        ))}\n      </div>\n\n      {selected && (\n        <p className=\"result\">\n          ✅ You voted for:{\" \"}\n          <span>{candidates.find((c) => c.id === selected).name}</span>\n        </p>\n      )}\n    </div>\n  );\n}\n","size_bytes":1244},"frontend/src/styles/CandidateCard.css":{"content":".card {\n  width: 250px;\n  height: 350px;\n  perspective: 1000px;\n  cursor: pointer;\n}\n\n.card-inner {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  transition: transform 0.8s;\n  transform-style: preserve-3d;\n}\n\n.card-inner.flipped {\n  transform: rotateY(180deg);\n}\n\n.card-front,\n.card-back {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  backface-visibility: hidden;\n  border: 3px solid #0ff;\n  border-radius: 12px;\n  box-shadow: 0 0 20px #0ff;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.card-front {\n  background: linear-gradient(145deg, #111, #222);\n}\n\n.card-front img {\n  width: 100%;\n  height: 70%;\n  object-fit: cover;\n  border-bottom: 2px solid #0ff;\n  padding: 10px;\n  border-radius: 16px;\n}\n\n.card-front h3 {\n  margin: 10px 0 0;\n  color: #0ff;\n  font-size: 1.2em;\n}\n\n.card-back {\n  background: linear-gradient(145deg, #222, #111);\n  transform: rotateY(180deg);\n  padding: 20px;\n  text-align: center;\n}\n\n.card-back h4 {\n  color: #0ff;\n  margin-bottom: 10px;\n}\n\n.card-back p {\n  font-size: 0.9em;\n  color: #ddd;\n  line-height: 1.4;\n}\n","size_bytes":1130},"frontend/src/styles/HomePage.css":{"content":"/* === GLOBAL === */\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: #0a0a0a;\n  color: #f0f0f0;\n  font-family: sans-serif;\n  line-height: 1.6;\n  padding-top: 80px;\n  /* biar konten turun sejajar navbar */\n  overflow: auto;\n}\n\n.homepage {\n  margin-top: 28px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  justify-content: flex-start;\n}\n\n.homepage-title {\n  font-size: 2.5rem;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  color: #f0f;\n  justify-content: center;\n  align-items: center;\n  text-shadow: 0 0 10px #f0f, 0 0 20px #f0f;\n}\n\n.homepage-subtitle {\n  font-size: 1.5rem;\n  /* ukuran agak besar */\n  color: #0ff;\n  /* neon cyan sesuai vibe futuristik */\n  text-shadow:\n    0 0 5px #0ff,\n    0 0 10px #0ff,\n    0 0 20px #0ff;\n  /* efek glow */\n  margin-bottom: 30px;\n  /* jarak dengan konten bawah */\n  font-weight: 500;\n  /* sedikit tebal tapi tidak terlalu berat */\n  letter-spacing: 1px;\n  /* spasi huruf agar lebih futuristik */\n  text-align: center;\n  /* center alignment */\n}\n\n/* opsi animasi glow lembut */\n@keyframes glowPulse {\n  0% {\n    text-shadow: 0 0 5px #0ff, 0 0 10px #0ff, 0 0 20px #0ff;\n  }\n\n  50% {\n    text-shadow: 0 0 10px #0ff, 0 0 20px #0ff, 0 0 40px #0ff;\n  }\n\n  100% {\n    text-shadow: 0 0 5px #0ff, 0 0 10px #0ff, 0 0 20px #0ff;\n  }\n}\n\n.homepage-subtitle {\n  animation: glowPulse 2s infinite alternate;\n}\n\n\n.container {\n  text-align: center;\n  padding: 20px;\n}\n\n.page-title {\n  font-size: 2rem;\n  margin-bottom: 20px;\n  color: #0ff;\n  text-shadow: 0 0 10px #0ff, 0 0 20px #0ff;\n}\n\n/* === Grid untuk kartu kandidat === */\n.card-container {\n  display: grid;\n  grid-template-columns: repeat(3, minmax(280px, 1fr));\n  gap: 25px;\n  justify-content: center;\n  align-items: stretch;\n  margin-top: 30px;\n  max-width: 1000px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n/* === Efek kartu kandidat === */\n.card {\n  width: 100%;\n  height: 360px;\n  perspective: 1000px;\n  cursor: pointer;\n}\n\n.card-inner {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  transition: transform 0.8s;\n  transform-style: preserve-3d;\n}\n\n.card-inner.flipped {\n  transform: rotateY(180deg);\n}\n\n.card-front,\n.card-back {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  backface-visibility: hidden;\n  border: 3px solid #0ff;\n  border-radius: 15px;\n  box-shadow: 0 0 20px #0ff, inset 0 0 30px rgba(0, 255, 255, 0.3);\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n/* === Depan kartu === */\n.card-front {\n  background: linear-gradient(145deg, #111, #1a1a1a);\n}\n\n.card-front img {\n  width: 100%;\n  height: 70%;\n  object-fit: cover;\n  border-bottom: 2px solid #0ff;\n}\n\n.card-front h3 {\n  margin: 10px 0 0;\n  color: #0ff;\n  font-size: 1.2em;\n  text-shadow: 0 0 5px #0ff, 0 0 10px #0ff;\n}\n\n/* === Belakang kartu === */\n.card-back {\n  background: linear-gradient(145deg, #1a1a1a, #111);\n  transform: rotateY(180deg);\n  padding: 20px;\n  text-align: left;\n  color: #ddd;\n}\n\n.card-back h4 {\n  color: #f0f;\n  margin-bottom: 10px;\n  text-shadow: 0 0 10px #f0f, 0 0 20px #f0f;\n}\n\n.card-back p {\n  font-size: 0.95em;\n  line-height: 1.5;\n  color: #ccc;\n}\n\n/* === Wrapper kandidat (kartu + tombol) === */\n.candidate-wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n/* === Tombol Vote === */\n.vote-btn {\n  margin-top: 24px;\n  padding: 10px 20px;\n  border: 2px solid #0ff;\n  border-radius: 12px;\n  background: transparent;\n  color: #0ff;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  transition: all 0.3s ease;\n  box-shadow: 0 0 10px #0ff, 0 0 20px #0ff;\n}\n\n.vote-btn:hover {\n  background: #0ff;\n  color: #0a0a0a;\n  box-shadow: 0 0 20px #0ff, 0 0 40px #0ff;\n  transform: scale(1.05);\n}\n\n.info-voting, .statistik, .aturan {\n  margin-top: 40px;\n  padding: 20px;\n  border-radius: 12px;\n  background: linear-gradient(145deg, #111, #1a1a1a);\n  border: 2px solid #0ff;\n  box-shadow: 0 0 15px #0ff, inset 0 0 25px rgba(0, 255, 255, 0.2);\n  color: #eee;\n}\n\n.info-voting h2, .statistik h2, .aturan h2 {\n  color: #f0f;\n  text-shadow: 0 0 8px #f0f, 0 0 15px #f0f;\n  margin-bottom: 15px;\n}\n\n.info-voting p, .statistik p, .aturan li {\n  color: #ccc;\n  font-size: 0.95rem;\n  line-height: 1.5;\n}\n\n.section-grid {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 25px;\n  max-width: 1000px;\n  margin: 40px auto;\n  padding: 0 20px;\n}\n\n.aturan {\n  grid-column: span 2;\n}\n\n/* Progress Bar */\n.progress-bar {\n  background: #222;\n  border: 2px solid #0ff;\n  border-radius: 8px;\n  overflow: hidden;\n  height: 20px;\n  margin: 10px 0;\n  box-shadow: inset 0 0 10px #0ff;\n}\n\n.progress {\n  background: linear-gradient(90deg, #0ff, #09f);\n  height: 100%;\n  box-shadow: 0 0 10px #0ff;\n}\n\n/* === Countdown Section === */\n.countdown {\n  text-align: center;\n  margin: 40px auto;\n  padding: 20px;\n  border: 2px solid #0ff;\n  border-radius: 15px;\n  background: linear-gradient(145deg, #111, #1a1a1a);\n  box-shadow: 0 0 15px #0ff, inset 0 0 20px rgba(0, 255, 255, 0.3);\n  max-width: 700px;\n}\n\n.countdown h2 {\n  color: #f0f;\n  text-shadow: 0 0 10px #f0f, 0 0 20px #f0f;\n  margin-bottom: 20px;\n}\n\n.countdown h3 {\n  font-size: 1.3rem;\n  color: #0ff;\n  /* neon cyan */\n  text-shadow:\n    0 0 5px #0ff,\n    0 0 10px #0ff,\n    0 0 20px #0ff;\n  text-align: center;\n  margin-top: 15px;\n  font-weight: 500;\n  letter-spacing: 1px;\n  animation: glowPulse 2s infinite alternate;\n  /* sama animasi glow seperti subtitle */\n}\n\n\n.countdown-timer {\n  display: flex;\n  justify-content: center;\n  gap: 30px;\n}\n\n.countdown-timer div {\n  text-align: center;\n  min-width: 70px;\n  background: #000;\n  padding: 15px;\n  border-radius: 10px;\n  border: 2px solid #0ff;\n  box-shadow: 0 0 10px #0ff;\n}\n\n.countdown-timer span {\n  font-size: 2rem;\n  font-weight: bold;\n  color: #0ff;\n  text-shadow: 0 0 10px #0ff, 0 0 15px #0ff;\n  display: block;\n}\n\n.countdown-timer p {\n  margin-top: 5px;\n  font-size: 0.9rem;\n  color: #f0f;\n}\n\n/* Footer */\n.footer {\n  text-align: center;\n  margin-top: 50px;\n  padding: 15px;\n  background: #111;\n  border-top: 2px solid #0ff;\n  color: #0ff;\n  font-size: 0.9rem;\n  text-shadow: 0 0 6px #0ff;\n}\n\n.info-voting,\n.aturan {\n  text-align: left;\n  /* rata kiri */\n  padding: 15px;\n  background: linear-gradient(145deg, #111, #1a1a1a);\n  border: 2px solid #0ff;\n  border-radius: 12px;\n  box-shadow: 0 0 15px #0ff;\n  color: #f0f0f0;\n  margin-bottom: 20px;\n}\n\n.info-voting h2,\n.aturan h2 {\n  color:  #f0f;\n  text-shadow: 0 0 5px  #f0f, 0 0 10px #0ff;\n  margin-bottom: 10px;\n}\n\n.info-voting p,\n.aturan ul {\n  margin: 5px 0;\n  line-height: 1.5;\n}\n\n.aturan ul {\n  padding-left: 20px;\n  /* beri jarak bullet list */\n}\n\n.statistik {\n  text-align: left;\n  /* rata kiri */\n  padding: 15px;\n  background: linear-gradient(145deg, #111, #1a1a1a);\n  border: 2px solid #0ff;\n  border-radius: 12px;\n  box-shadow: 0 0 15px #0ff;\n  color: #f0f0f0;\n  margin-bottom: 20px;\n}\n\n.statistik h2 {\n  color:  #f0f;\n  text-shadow: 0 0 5px  #f0f, 0 0 10px #0ff;\n  margin-bottom: 10px;\n}\n\n.statistik p {\n  margin: 5px 0;\n  line-height: 1.5;\n}\n\n/* Progress bar */\n.progress-bar {\n  background: #111;\n  border: 1px solid #0ff;\n  border-radius: 10px;\n  overflow: hidden;\n  height: 20px;\n  margin-top: 10px;\n}\n\n.progress {\n  height: 100%;\n  background: #0ff;\n  width: 0%;\n  transition: width 0.5s ease-in-out;\n}\n\n\n/* === Responsif ke mobile === */\n@media (max-width: 768px) {\n  .card-container {\n    grid-template-columns: repeat(1, minmax(280px, 1fr));\n  }\n}","size_bytes":7505},"frontend/src/styles/LoginPage.css":{"content":"/* Neon Minimalist Login Form - Complete & Self-Contained */\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    background: #0a0a0f;\n    min-height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 20px;\n    line-height: 1.6;\n    overflow: hidden;\n}\n\n.login-container {\n    width: 100%;\n    max-width: 400px;\n    position: relative;\n    z-index: 10;\n}\n\n.login-card {\n    background: #151520;\n    border: 1px solid #2a2a35;\n    border-radius: 16px;\n    padding: 40px;\n    box-shadow:\n        0 20px 40px rgba(0, 0, 0, 0.3),\n        0 0 0 1px rgba(255, 255, 255, 0.05);\n    position: relative;\n    backdrop-filter: blur(20px);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.login-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 1px;\n    background: linear-gradient(90deg, transparent, #00ff88, transparent);\n    opacity: 0;\n    transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.login-card:hover::before {\n    opacity: 1;\n}\n\n.login-card:hover {\n    box-shadow:\n        0 20px 60px rgba(0, 0, 0, 0.4),\n        0 0 0 1px rgba(0, 255, 136, 0.1),\n        0 0 40px rgba(0, 255, 136, 0.1);\n    transform: translateY(-2px);\n}\n\n.login-header {\n    text-align: center;\n    margin-bottom: 40px;\n}\n\n.logo-icon {\n    font-size: 2.5rem;\n    margin-bottom: 16px;\n    background: linear-gradient(135deg, #00ff88, #0099ff);\n    -webkit-background-clip: text;\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n    filter: drop-shadow(0 0 20px rgba(0, 255, 136, 0.3));\n    animation: pulse 2s ease-in-out infinite alternate;\n}\n\n.login-header h2 {\n    color: #ffffff;\n    font-size: 2rem;\n    font-weight: 600;\n    margin-bottom: 8px;\n    letter-spacing: -0.02em;\n}\n\n.login-header p {\n    color: #a0a0b0;\n    font-size: 16px;\n    font-weight: 400;\n}\n\n/* Form Group & Input Styles */\n.form-group {\n    margin-bottom: 24px;\n    position: relative;\n}\n\n.input-wrapper {\n    position: relative;\n    margin-bottom: 24px;\n}\n\n.input-wrapper input {\n    width: 100%;\n    background: #1a1a25;\n    border: 1px solid #2a2a35;\n    border-radius: 6px;\n    padding: 24px 16px;\n    color: #ffffff;\n    font-size: 16px;\n    font-weight: 400;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    outline: none;\n}\n\n.input-wrapper input:focus {\n    border-color: #00ff88;\n    background: rgba(26, 26, 37, 0.8);\n    box-shadow:\n        0 0 0 3px rgba(0, 255, 136, 0.1),\n        0 4px 20px rgba(0, 255, 136, 0.1);\n}\n\n.input-wrapper input:focus+label,\n.input-wrapper input:valid+label {\n    transform: translateY(-32px) translateX(4px) scale(0.85);\n    color: #00ff88;\n    font-weight: 500;\n}\n\n.input-wrapper label {\n    position: absolute;\n    left: 16px;\n    top: 24px;\n    color: #a0a0b0;\n    font-size: 16px;\n    font-weight: 400;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    pointer-events: none;\n    transform-origin: left top;\n}\n\n.input-line {\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    width: 0;\n    height: 2px;\n    background: linear-gradient(90deg, #00ff88, #0099ff);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    transform: translateX(-50%);\n    border-radius: 2px;\n}\n\n.input-wrapper input:focus~.input-line {\n    width: 100%;\n}\n\n/* Password Toggle */\n.password-wrapper input {\n    padding-right: 50px;\n}\n\n.password-toggle {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n    background: none;\n    border: none;\n    cursor: pointer;\n    padding: 8px;\n    color: #a0a0b0;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    border-radius: 6px;\n}\n\n.password-toggle:hover {\n    color: #00ff88;\n    background: rgba(0, 255, 136, 0.1);\n}\n\n.toggle-icon {\n    display: block;\n    width: 20px;\n    height: 20px;\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23a0a0b0' stroke-width='2'%3e%3cpath stroke-linecap='round' stroke-linejoin='round' d='M15 12a3 3 0 11-6 0 3 3 0 016 0z'/%3e%3cpath stroke-linecap='round' stroke-linejoin='round' d='M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z'/%3e%3c/svg%3e\");\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.password-toggle:hover .toggle-icon {\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%2300ff88' stroke-width='2'%3e%3cpath stroke-linecap='round' stroke-linejoin='round' d='M15 12a3 3 0 11-6 0 3 3 0 016 0z'/%3e%3cpath stroke-linecap='round' stroke-linejoin='round' d='M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z'/%3e%3c/svg%3e\");\n}\n\n.toggle-icon.show-password {\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23a0a0b0' stroke-width='2'%3e%3cpath stroke-linecap='round' stroke-linejoin='round' d='M3.98 8.223A10.477 10.477 0 001.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.45 10.45 0 0112 4.5c4.756 0 8.773 3.162 10.065 7.498a10.523 10.523 0 01-4.293 5.774M6.228 6.228L3 3m3.228 3.228l3.65 3.65m7.894 7.894L21 21m-3.228-3.228l-3.65-3.65m0 0a3 3 0 11-4.243-4.243m4.242 4.242L9.88 9.88'/%3e%3c/svg%3e\");\n}\n\n/* Form Options */\n.form-options {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 32px;\n    flex-wrap: wrap;\n    gap: 16px;\n}\n\n.remember-wrapper {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    cursor: pointer;\n}\n\n.remember-wrapper input[type=\"checkbox\"] {\n    display: none;\n}\n\n.custom-checkbox {\n    width: 16px;\n    height: 16px;\n    border: 2px solid #2a2a35;\n    border-radius: 3px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    position: relative;\n}\n\n.custom-checkbox::after {\n    content: '';\n    width: 8px;\n    height: 8px;\n    background: #00ff88;\n    border-radius: 1px;\n    transform: scale(0);\n    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.remember-wrapper input[type=\"checkbox\"]:checked+.checkbox-label .custom-checkbox {\n    border-color: #00ff88;\n    background: rgba(0, 255, 136, 0.1);\n    box-shadow: 0 0 10px rgba(0, 255, 136, 0.3);\n}\n\n.remember-wrapper input[type=\"checkbox\"]:checked+.checkbox-label .custom-checkbox::after {\n    transform: scale(1);\n}\n\n.checkbox-label {\n    color: #a0a0b0;\n    font-size: 14px;\n    cursor: pointer;\n    user-select: none;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    transition: color 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.remember-wrapper:hover .checkbox-label {\n    color: #ffffff;\n}\n\n.forgot-password {\n    color: #a0a0b0;\n    text-decoration: none;\n    font-size: 14px;\n    font-weight: 500;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    position: relative;\n}\n\n.forgot-password:hover {\n    color: #00ff88;\n}\n\n/* Neon Button */\n.login-btn {\n    width: 100%;\n    background: linear-gradient(135deg, #00ff88, #0099ff);\n    border: none;\n    border-radius: 6px;\n    padding: 24px 32px;\n    color: #0a0a0f;\n    font-size: 16px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    position: relative;\n    overflow: hidden;\n    margin-bottom: 24px;\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n}\n\n.btn-glow {\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\n    transition: left 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.login-btn:hover {\n    transform: translateY(-1px);\n    box-shadow:\n        0 10px 30px rgba(0, 255, 136, 0.3),\n        0 0 40px rgba(0, 255, 136, 0.2);\n}\n\n.login-btn:hover .btn-glow {\n    left: 100%;\n}\n\n.login-btn:active {\n    transform: translateY(0);\n}\n\n/* Loading State */\n.login-btn.loading {\n    pointer-events: none;\n}\n\n.btn-text {\n    transition: opacity 0.3s ease;\n}\n\n.btn-loader {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 20px;\n    height: 20px;\n    border: 2px solid transparent;\n    border-top: 2px solid #0a0a0f;\n    border-radius: 50%;\n    opacity: 0;\n    animation: spin 1s linear infinite;\n    transition: opacity 0.3s ease;\n}\n\n.login-btn.loading .btn-text {\n    opacity: 0;\n}\n\n.login-btn.loading .btn-loader {\n    opacity: 1;\n}\n\n/* Divider */\n.divider {\n    text-align: center;\n    margin: 32px 0 24px;\n    position: relative;\n}\n\n.divider::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 0;\n    right: 0;\n    height: 1px;\n    background: linear-gradient(90deg, transparent, #2a2a35, transparent);\n    transform: translateY(-50%);\n}\n\n.divider span {\n    background: #151520;\n    color: #a0a0b0;\n    padding: 0 24px;\n    font-size: 14px;\n    text-transform: uppercase;\n    letter-spacing: 0.1em;\n    position: relative;\n    z-index: 1;\n}\n\n/* Social Login */\n.social-login {\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n    margin-bottom: 24px;\n}\n\n.social-btn {\n    background: #1a1a25;\n    border: 1px solid #2a2a35;\n    border-radius: 6px;\n    padding: 16px 24px;\n    color: #ffffff;\n    font-size: 14px;\n    font-weight: 500;\n    cursor: pointer;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 16px;\n}\n\n.social-btn:hover {\n    background: rgba(26, 26, 37, 0.8);\n    border-color: #00ff88;\n    transform: translateY(-1px);\n    box-shadow: 0 4px 20px rgba(0, 255, 136, 0.1);\n}\n\n.social-icon {\n    width: 20px;\n    height: 20px;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center;\n}\n\n.google-icon {\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3e%3cpath fill='%23ea4335' d='M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z'/%3e%3cpath fill='%2334a853' d='M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z'/%3e%3cpath fill='%23fbbc05' d='M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z'/%3e%3cpath fill='%23ea4335' d='M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z'/%3e%3c/svg%3e\");\n}\n\n.apple-icon {\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3e%3cpath d='M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z'/%3e%3c/svg%3e\");\n}\n\n/* Signup Link */\n.signup-link {\n    text-align: center;\n}\n\n.signup-link p {\n    color: #a0a0b0;\n    font-size: 14px;\n}\n\n.signup-link a {\n    color: #00ff88;\n    text-decoration: none;\n    font-weight: 500;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.signup-link a:hover {\n    color: #0099ff;\n    text-shadow: 0 0 10px rgba(0, 153, 255, 0.5);\n}\n\n/* Error States */\n.error-message {\n    color: #ff0080;\n    font-size: 12px;\n    font-weight: 500;\n    margin-top: 8px;\n    margin-left: 4px;\n    opacity: 0;\n    transform: translateY(-10px);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    background: rgba(255, 0, 128, 0.1);\n    padding: 4px 8px;\n    border-radius: 6px;\n    border: 1px solid rgba(255, 0, 128, 0.2);\n}\n\n.error-message.show {\n    opacity: 1;\n    transform: translateY(0);\n}\n\n.form-group.error .input-wrapper input {\n    border-color: #ff0080;\n    background: rgba(255, 0, 128, 0.05);\n    box-shadow: 0 0 0 3px rgba(255, 0, 128, 0.1);\n    animation: shake 0.5s ease-in-out;\n}\n\n/* Success Message */\n.success-message {\n    display: none;\n    text-align: center;\n    padding: 40px 24px;\n    opacity: 0;\n    transform: translateY(20px);\n    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.success-message.show {\n    display: block;\n    opacity: 1;\n    transform: translateY(0);\n}\n\n.success-icon {\n    width: 60px;\n    height: 60px;\n    background: linear-gradient(135deg, #00ff88, #0099ff);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 24px;\n    color: #0a0a0f;\n    margin: 0 auto 24px;\n    animation: successPulse 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    box-shadow: 0 0 30px rgba(0, 255, 136, 0.5);\n}\n\n.success-message h3 {\n    color: #ffffff;\n    font-size: 1.5rem;\n    margin-bottom: 8px;\n}\n\n.success-message p {\n    color: #a0a0b0;\n    font-size: 16px;\n}\n\n/* Background Effects */\n.background-effects {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    z-index: 1;\n}\n\n.glow-orb {\n    position: absolute;\n    border-radius: 50%;\n    background: radial-gradient(circle, rgba(0, 255, 136, 0.1), transparent 70%);\n    animation: float 6s ease-in-out infinite;\n}\n\n.glow-orb-1 {\n    width: 300px;\n    height: 300px;\n    top: 10%;\n    left: -10%;\n    background: radial-gradient(circle, rgba(0, 255, 136, 0.08), transparent 70%);\n    animation-delay: 0s;\n}\n\n.glow-orb-2 {\n    width: 200px;\n    height: 200px;\n    top: 60%;\n    right: -5%;\n    background: radial-gradient(circle, rgba(0, 153, 255, 0.06), transparent 70%);\n    animation-delay: -2s;\n}\n\n.glow-orb-3 {\n    width: 150px;\n    height: 150px;\n    bottom: 20%;\n    left: 10%;\n    background: radial-gradient(circle, rgba(255, 0, 128, 0.04), transparent 70%);\n    animation-delay: -4s;\n}\n\n/* Step Effect */\n.step-indicator {\n    display: flex;\n    justify-content: space-between;\n    margin: 20px 0;\n    font-size: 14px;\n    font-weight: 600;\n    color: #888;\n    position: relative;\n}\n\n.step-indicator::before {\n    content: \"\";\n    position: absolute;\n    bottom: -5px;\n    left: 0;\n    width: 100%;\n    height: 3px;\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 2px;\n}\n\n.step {\n    flex: 1;\n    text-align: center;\n    position: relative;\n    z-index: 1;\n}\n\n.step.active {\n    color: #00ffe7;\n}\n\n.step.active::after {\n    content: \"\";\n    position: absolute;\n    bottom: -5px;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: #00ffe7;\n    box-shadow: 0 0 8px #00ffe7, 0 0 15px #00ffe7;\n    border-radius: 2px;\n}\n\n\n/* Animations */\n@keyframes pulse {\n    from {\n        filter: drop-shadow(0 0 20px rgba(0, 255, 136, 0.3));\n    }\n\n    to {\n        filter: drop-shadow(0 0 30px rgba(0, 255, 136, 0.6));\n    }\n}\n\n@keyframes float {\n    0%, 100% {\n        transform: translateY(0px) translateX(0px);\n    }\n\n    33% {\n        transform: translateY(-20px) translateX(10px);\n    }\n\n    66% {\n        transform: translateY(10px) translateX(-10px);\n    }\n}\n\n@keyframes spin {\n    0% {\n        transform: translate(-50%, -50%) rotate(0deg);\n    }\n\n    100% {\n        transform: translate(-50%, -50%) rotate(360deg);\n    }\n}\n\n@keyframes shake {\n    0%, 100% {\n        transform: translateX(0);\n    }\n\n    25% {\n        transform: translateX(-5px);\n    }\n\n    75% {\n        transform: translateX(5px);\n    }\n}\n\n@keyframes successPulse {\n    0% {\n        transform: scale(0);\n    }\n\n    50% {\n        transform: scale(1.1);\n    }\n\n    100% {\n        transform: scale(1);\n    }\n}\n\n\n/* Mobile Responsive */\n@media (max-width: 480px) {\n    body {\n        padding: 10px;\n    }\n\n    .login-card {\n        padding: 24px;\n        margin: 10px;\n    }\n\n    .login-header h2 {\n        font-size: 1.75rem;\n    }\n\n    .input-wrapper input {\n        padding: 16px;\n    }\n\n    .password-wrapper input {\n        padding-right: 45px;\n    }\n\n    .form-options {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 16px;\n    }\n\n    .glow-orb {\n        opacity: 0.5;\n    }\n\n}","size_bytes":16544},"frontend/src/styles/Navbar.css":{"content":".navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: rgba(17, 17, 17, 0.95);\n  /* semi transparan */\n  backdrop-filter: blur(8px);\n  /* blur belakang */\n  padding: 15px 40px;\n  width: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  z-index: 1000;\n  box-shadow: 0 4px 20px rgba(0, 255, 255, 0.3);\n  /* glow bawah lebih dramatis */\n  border-bottom: 2px solid #0ff;\n  /* garis neon tipis */\n}\n\n.logo {\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: #0ff;\n  text-shadow: 0 0 10px #0ff, 0 0 20px #0ff, 0 0 30px #0ff;\n  letter-spacing: 1.5px;\n}\n\n.nav-links {\n  list-style: none;\n  display: flex;\n  gap: 25px;\n  margin: 0;\n  padding: 0;\n}\n\n.nav-links li a {\n  color: #f0f0f0;\n  text-decoration: none;\n  font-size: 1rem;\n  transition: all 0.3s ease;\n  position: relative;\n}\n\n.nav-links li a::after {\n  content: \"\";\n  position: absolute;\n  width: 0%;\n  height: 2px;\n  bottom: -4px;\n  left: 0;\n  background: #0ff;\n  transition: 0.3s;\n}\n\n.nav-links li a:hover::after {\n  width: 100%;\n}\n\n.nav-links li a:hover {\n  color: #0ff;\n  text-shadow: 0 0 10px #0ff, 0 0 20px #0ff;\n}\n\n.special-btn {\n  background: #f0f;\n  color: #fff;\n  padding: 8px 18px;\n  border-radius: 20px;\n  font-weight: 500;\n  transition: all 0.3s ease;\n  box-shadow: 0 0 12px #f0f, 0 0 20px #f0f;\n  border: none;\n  cursor: pointer;\n}\n\n.special-btn:hover {\n  background: #c800c8;\n  box-shadow: 0 0 20px #f0f, 0 0 30px #f0f;\n  transform: scale(1.05);\n}","size_bytes":1464},"frontend/src/styles/Statistik.css":{"content":".statistik-page {\n    padding: 20px;\n    text-align: center;\n    color: #f0f0f0;\n}\n\n.page-title {\n    font-size: 2rem;\n    margin-top: 20px;\n    margin-bottom: 20px;\n    color: #f0f;\n    text-shadow: 0 0 10px #f0f, 0 0 20px #f0f;\n}\n\n.statistik-info {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 20px;\n    margin: 20px 0 40px;\n}\n\n.stat-box {\n    background: linear-gradient(145deg, #111, #1a1a1a);\n    border: 2px solid #0ff;\n    border-radius: 12px;\n    padding: 15px;\n    box-shadow: 0 0 15px #0ff;\n}\n\n.stat-box h3 {\n    color: #0ff;\n    margin-bottom: 5px;\n}\n\n.chart-container {\n    margin: 30px auto;\n    padding: 20px;\n    max-width: 800px;\n    background: linear-gradient(145deg, #111, #1a1a1a);\n    border: 2px solid #0ff;\n    border-radius: 12px;\n    box-shadow: 0 0 15px #0ff;\n}\n\n/* Tablet */\n@media (max-width: 1024px) {\n    .statistik-info {\n        grid-template-columns: repeat(2, 1fr); /* 2 kolom */\n        gap: 15px;\n    }\n}\n\n/* Mobile */\n@media (max-width: 600px) {\n    .statistik-info {\n        grid-template-columns: 2fr; /* 1 kolom */\n        gap: 10px;\n    }\n\n    .stat-box {\n        padding: 10px;\n    }\n\n    .page-title {\n        font-size: 1.5rem;\n    }\n\n    .chart-container {\n        padding: 15px;\n        max-width: 100%;\n    }\n}","size_bytes":1283},"frontend/src/styles/VotePage.css":{"content":"#root {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\nbody {\n    margin-top: 20px;\n    /* kasih jarak setinggi navbar */\n    overflow: hidden;\n}\n\n/* Container untuk halaman */\n.container {\n    margin-top: 120px;\n    /* biar ga ketimpa navbar */\n    padding: 20px;\n    text-align: center;\n}\n\n/* Judul halaman */\n.page-title {\n    font-size: 2rem;\n    margin-bottom: 30px;\n    color: #00fff7;\n    text-shadow: 0 0 10px #00fff7;\n}\n\n/* Grid kartu */\n.card-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 25px;\n    justify-content: center;\n}\n\n/* Kartu kandidat ala Pokemon */\n.vote-card {\n    background: linear-gradient(145deg, #1a1a1a, #0d0d0d);\n    border: 3px solid #00fff7;\n    border-radius: 16px;\n    box-shadow: 0 0 15px rgba(0, 255, 247, 0.5),\n        inset 0 0 20px rgba(0, 255, 247, 0.2);\n    padding: 20px;\n    transition: transform 0.2s ease, box-shadow 0.3s ease;\n    text-align: center;\n}\n\n.vote-card:hover {\n    transform: translateY(-8px) scale(1.02);\n    box-shadow: 0 0 25px rgba(0, 255, 247, 0.8),\n        inset 0 0 25px rgba(0, 255, 247, 0.3);\n}\n\n.vote-card h2 {\n    font-size: 1.5rem;\n    color: #ffcc00;\n    margin-bottom: 10px;\n    text-shadow: 0 0 8px #ffcc00;\n}\n\n.vote-card p {\n    font-size: 0.95rem;\n    color: #ccc;\n    margin-bottom: 15px;\n}\n\n/* Tombol vote */\n.vote-card button {\n    background: #00fff7;\n    color: #111;\n    font-weight: bold;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 10px;\n    cursor: pointer;\n    transition: 0.3s;\n}\n\n.vote-card button:hover {\n    background: #ffcc00;\n    color: #111;\n    box-shadow: 0 0 15px #ffcc00;\n}\n\n/* Efek kalau sudah dipilih */\n.vote-card.selected {\n    border-color: #ffcc00;\n    box-shadow: 0 0 25px #ffcc00, inset 0 0 20px rgba(255, 204, 0, 0.3);\n}\n\n/* Hasil vote */\n.result {\n    margin-top: 25px;\n    font-size: 1.2rem;\n    color: #00ff9d;\n    font-weight: bold;\n}","size_bytes":1935},"smart-contract/ignition/modules/Lock.js":{"content":"// This setup uses Hardhat Ignition to manage smart contract deployments.\n// Learn more about it at https://hardhat.org/ignition\n\nconst { buildModule } = require(\"@nomicfoundation/hardhat-ignition/modules\");\n\nconst JAN_1ST_2030 = 1893456000;\nconst ONE_GWEI = 1_000_000_000n;\n\nmodule.exports = buildModule(\"LockModule\", (m) => {\n  const unlockTime = m.getParameter(\"unlockTime\", JAN_1ST_2030);\n  const lockedAmount = m.getParameter(\"lockedAmount\", ONE_GWEI);\n\n  const lock = m.contract(\"Lock\", [unlockTime], {\n    value: lockedAmount,\n  });\n\n  return { lock };\n});\n","size_bytes":564}},"version":1}